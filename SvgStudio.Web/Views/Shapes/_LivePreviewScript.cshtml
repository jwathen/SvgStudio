@model SvgStudio.Web.ViewModels.Shapes.ShapeViewModel
<script>
    $(function () {
        var widthId = '#@Html.IdFor(x => x.Width)';
        var heightId = '#@Html.IdFor(x => x.Height)';
        var previewPaletteId = '#@Html.Id("PreviewPaletteId")'
        var elementIds = [widthId, heightId, previewPaletteId];

        var xmlEditor = $('#@Html.IdFor(x => x.BasicShape_MarkupFragment.Content)').data('CodeMirrorInstance');

        var updatePreviews = function () {
            var data = {
                width: $(widthId).val(),
                height: $(heightId).val(),
                xml: xmlEditor.getValue()
            };

            $.ajax({
                url: '@Url.Action(MVC.Shapes.GeneratePreview())',
                method: 'POST',
                data: data,
                success: function (preview) {
                    $('#DefaultPreviewContainer').html(preview);
                }
            });

            data.paletteId = $(previewPaletteId).val();
            $.ajax({
                url: '@Url.Action(MVC.Shapes.GeneratePreview())',
                method: 'POST',
                data: data,
                success: function (preview) {
                    $('#FilledPreviewContainer').html(preview);
                }
            });
        };
        updatePreviews = $.debounce(500, updatePreviews);

        $(elementIds.join(',')).change(updatePreviews);
        xmlEditor.on('change', updatePreviews);
        updatePreviews();

        $('#autoCalcWidth').click(function (e) {
            e.preventDefault();
            var $svg = $('#DefaultPreviewContainer').find('svg');
            if ($svg.length) {
                var box = $svg[0].getBBox();
                console.log(box.width);
                $(widthId).val(box.width);
                updatePreviews();
            }
        });
        $('#autoCalcHeight').click(function (e) {
            e.preventDefault();
            var $svg = $('#DefaultPreviewContainer').find('svg');
            if ($svg.length) {
                var box = $svg[0].getBBox();
                $(heightId).val(box.height);
                updatePreviews();
            }
        });

        $('#autoFixShapeMarkup').click(function (e) {
            e.preventDefault();
            $.ajax({
                url: '@Url.Action(MVC.Shapes.AutoFixShapeMarkup())',
                method: 'POST',
                data: {
                    xml: xmlEditor.getValue()
                },
                success: function (fixed) {
                    if (fixed) {
                        xmlEditor.setValue(fixed);
                    }
                }
            });
        });
    });
</script>
