@model SvgStudio.Web.ViewModels.Shapes.ShapeViewModel
@{
    ViewBag.Title = "Edit Shape";
}

<h2>Shapes</h2>
<p>
    <a href="@Url.Action(MVC.Shapes.Index())">
        <i class="fa fa-chevron-left"></i> Back to Shapes
    </a>
</p>
<div class="col-lg-12">
    <div class="panel panel-default">
        <div class="panel-heading">
            Edit Shape
        </div>
        <div class="panel-body">
            @Html.ValidationSummary()
            <form role="form" action="@Url.Action(MVC.Shapes.Edit())" method="post">
                @Html.EditorForModel()
                <input type="submit" name="@Html.NameFor(x => x.Action)" value="Save" class="btn btn-primary pull-left" />
                @if (!Model.IsNew())
                {
                    <input type="submit" name="@Html.NameFor(x => x.Action)" value="Delete" class="btn btn-danger pull-right" data-confirm="Are you sure you want to delete this shape?" />
                }
                @Html.AntiForgeryToken()
            </form>
        </div>
    </div>
</div>
@section scripts {
    @Html.Partial(MVC.Shared.Views._CodeMirrorScript)
    <script>
        $(function () {
            var widthId = '#@Html.IdFor(x => x.Width)';
            var heightId = '#@Html.IdFor(x => x.Height)';
            var numberOfStrokesSupportedId = '#@Html.IdFor(x => x.NumberOfStrokesSupported)';
            var numberOfFillsSupportedId = '#@Html.IdFor(x => x.NumberOfFillsSupported)';
            var elementIds = [widthId, heightId, numberOfStrokesSupportedId, numberOfFillsSupportedId];

            var xmlEditor = $('#@Html.IdFor(x => x.BasicShape_MarkupFragment.Content)').data('CodeMirrorInstance');

            var updatePreviews = function () {
                var data = {
                    width: $(widthId).val(),
                    height: $(heightId).val(),
                    numberOfStrokesSupported: $(numberOfStrokesSupportedId).val(),
                    numberOfFillsSupported: $(numberOfFillsSupportedId).val(),
                    xml: xmlEditor.getValue()
                };

                $.ajax({
                    url: '@Url.Action(MVC.Shapes.GeneratePreview())',
                    method: 'POST',
                    data: data,
                    success: function (preview) {
                        $('#DefaultPreviewContainer').html(preview);
                    }
                });

                data.paletteId = '17356785688033-9e07eca871544023a';
                $.ajax({
                    url: '@Url.Action(MVC.Shapes.GeneratePreview())',
                    method: 'POST',
                    data: data,
                    success: function (preview) {
                        $('#FilledPreviewContainer').html(preview);
                    }
                });
            };

            $(elementIds.join(',')).change(updatePreviews);
            xmlEditor.on('change', updatePreviews);
            updatePreviews();
        });
    </script>
}
